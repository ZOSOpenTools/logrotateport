diff --git a/config.c b/config.c
index 83009ac..66068ec 100644
--- a/config.c
+++ b/config.c
@@ -427,7 +427,7 @@ static int do_mkdir(const char *path, mode_t mode, uid_t uid, gid_t gid) {
         int fd;
 
         /* newly created directory, set the owner and permissions */
-        fd = open(path, O_RDONLY | O_DIRECTORY | O_NOFOLLOW);
+        fd = open(path, O_RDONLY);
         if (fd < 0) {
             message(MESS_ERROR, "error opening %s after creation: %s\n",
                     path, strerror(errno));
@@ -700,7 +700,7 @@ static int readConfigPath(const char *path, struct logInfo *defConfig)
         unsigned files_count = 0, i;
         DIR *dirp;
 
-        if ((here = open(".", O_RDONLY | O_DIRECTORY)) == -1) {
+        if ((here = open(".", O_RDONLY )) == -1) {
             message(MESS_ERROR, "cannot open current directory: %s\n",
                     strerror(errno));
             return 1;
diff --git a/logrotate.c b/logrotate.c
index 7fff811..4cee89a 100644
--- a/logrotate.c
+++ b/logrotate.c
@@ -224,7 +224,7 @@ static int open_logfile(const char *path, const struct logInfo *log, int write_a
     int fd;
     struct stat sb;
 
-    fd = open(path, O_NOFOLLOW | (write_access ? O_RDWR : O_RDONLY));
+    fd = open(path, (write_access ? O_RDWR : O_RDONLY));
     if (fd < 0)
         return fd;
 
@@ -561,7 +561,7 @@ static int createOutputFile(const char *fileName, int flags, const struct stat *
         size_t fileName_size, buf_size;
         char *backupName, *ptr;
 
-        fd = open(fileName, (flags | O_CREAT | O_EXCL | O_NOFOLLOW),
+        fd = open(fileName, (flags | O_CREAT | O_EXCL),
                 (S_IRUSR | S_IWUSR) & sb->st_mode);
 
         if ((fd >= 0) || (errno != EEXIST))
@@ -1419,7 +1419,7 @@ static int findNeedRotating(const struct logInfo *log, unsigned logNum, int forc
     state->sb = sb;
     state->isUsed = 1;
 
-    if ((sb.st_mode & S_IFMT) == S_IFLNK) {
+    if (S_ISLNK(sb.st_mode)) {
         message(MESS_DEBUG, "  log %s is symbolic link. Rotation of symbolic"
                 " links is not allowed to avoid security issues -- skipping.\n",
                 log->files[logNum]);
@@ -3050,7 +3050,7 @@ static int lockState(const char *stateFilename, int skip_state_lock, int wait_fo
         return 0;
     }
 
-    lockFd = open(stateFilename, O_RDWR | O_CLOEXEC);
+    lockFd = open(stateFilename, O_RDWR);
     if (lockFd == -1) {
         if (errno == ENOENT) {
             message(MESS_DEBUG, "Creating stub state file: %s\n",
